Advantages of Utils class:
The Utils class provides advantages to reuse the code.

Disadvantages of Utils class:
There is possibility of breaking SOLID principle unless considered properly.
Static method stays in memory for longer duration
What is the most significant problem of introducing Utils class?
I have seen several projects where :

A typical Utils class contains 4000+ lines of code.
Atleast 1/3rd of total code are utils classes.
A single utils class does multiple types of operations e.g Text related operation, View related operation, Temporary storage, File read/write operation etc etc..
In most if utils classes at least 2/3rd of code is never re-used
What is the root cause of such problem and how to solve?
Reason-1. We have assumed the code may be re-used in several places in future, But the future never came, and we never checked our code in future

solution:

First create instance of a class and use it. Dont mark the code as utils unless it is used in several places. Have a look on your previous code on regular interval. At-least once a month, go though your previous code base and analyse how we can make this better

Reason-2. We want to write a code, but we donâ€™t know where to write. Most of developers in such cases creates a Utils class or adds to the existing Utils class.

solution:

Its better to create a new class with proper naming e.g EmailValidator, EmailFormatter, EmailCreator, EmailSendor etc etc

It is better to create separate Utils class for distinct behaviour instead of Single Utils class e.g TextUtils, ViewUtils, ArrayUtils

Problem when using Utility Classes
Tight Coupling
The main problem is that a class depending on a static method from a Utility Class has tight coupling. You are using a specific external dependency, not an abstraction. There is no way to switch that dependency under various circumstances. Usually, you would be able to provide a subclass of that dependency instead or another dependency implementing the interface. You lose that flexibility completely.

Single Responsibility
A class using Utility Class is responsible not only for its original role, but also for obtaining its dependencies. 
Another problem is that existing Utility Classes have tendencies to rot. Usually, such classes are created from a code, which has no better or proper place to be. 
Over time, if you are not very strict, these classes tend to accumulate more and more code, which may be not so related to the original methods. The class would lose its original single responsibility and become a jack-of-all-trades. Known as God Class.

https://dogan-ucar.de/static-source-code-why-you-should-avoid-it/

Last but not the least there is high possibility of code duplication as there could be same static behaviour spread across entire code base as developers find a easy way out to just create it and polute the entire code base as most 
of the developers are lazy and do not have time to check the code base due to limited knowledge of the project.
